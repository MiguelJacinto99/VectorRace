import time

from Graph import Graph

filePath1 = "circuitoAberto.txt"
filePath2 = "circular.txt"
filePath3 = "labirinto.txt"
filePath4 = "oval.txt"
filePath5 = "reta.txt"
filePath6 = "buraco.txt"
filePath7 = "estrada.txt"
filePath8 = "caminhoApertado.txt"
filePath9 = "espiral.txt"
filePath10 = "hexa.txt"
filePathEspecial = "retaPerigosa.txt"
filePath11 = "circuitoAbertoPath.txt"
filePath22 = "circularPath.txt"
filePath33 = "labirintoPath.txt"
filePath44 = "ovalPath.txt"
filePath55 = "retaPath.txt"
filePath66 = "buracoPath.txt"
filePath77 = "estradaPath.txt"
filePath88 = "caminhoApertadoPath.txt"
filePath99 = "espiralPath.txt"
filePath100 = "hexaPath.txt"
filePathEspecialPath = "retaPerigosaPath.txt"

option = 1000
print("VECTORRACE!")
print("ESCOLHER CIRCUITO: ")
print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
print("PRIMA 0 PARA SAIR DO VECTORRACE.")
while option != '0':
    option = input()
    match option:
        case '1':
            g = Graph()
            g.parse(filePath1)
            g.criaGrafo()
            g.heuristicaCheckPoint()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath1, filePath11)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '2':
            g = Graph()
            g.parse(filePath2)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath2, filePath22)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '3':
            g = Graph()
            g.parse(filePath3)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath3, filePath33)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '4':
            g = Graph()
            g.parse(filePath4)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath4, filePath44)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '5':
            g = Graph()
            g.parse(filePath5)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            '''
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            '''
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath5, filePath55)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '6':
            g = Graph()
            g.parse(filePath6)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath6, filePath66)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '7':
            g = Graph()
            g.parse(filePath7)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath7, filePath77)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '8':
            g = Graph()
            g.parse(filePath8)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath8, filePath88)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '9':
            g = Graph()
            g.parse(filePath9)
            g.heuristicaCheckPoint()
            g.criaGrafo()
            # Algoritmo DFS
            print("JOGADOR 1. CARRO DFS:")
            print()
            begin = time.time()
            caminhoDFS = g.procura_DFS(g.partida, 1, g.chegadas, path=[], visited=set())
            caminhoDFS = g.criaTuple(caminhoDFS)
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoDFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoDFS))
            print("O ALGORITMO DFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo BFS
            print("JOGADOR 2. CARRO BFS:")
            print()
            begin = time.time()
            caminhoBFS = g.procura_BFS(g.partida, g.chegadas, queue=[], visited=set())
            caminhoBFS = g.criaTuple(caminhoBFS)
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoBFS)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("CAMINHO: " + str(caminhoBFS))
            print("O ALGORITMO BFS DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo Seguro
            print("JOGADOR 3. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 3 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 4. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 4 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath9, filePath99)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '10':
            g = Graph()
            g.parse(filePath10)
            g.heuristicaCheckPoint()
            # Algoritmo Seguro
            print("JOGADOR 1. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 2. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePath10, filePath100)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '11':
            g = Graph()
            g.parse(filePathEspecial)
            g.heuristicaCheckPoint()
            # Algoritmo Seguro
            print("JOGADOR 1. CARRO SEGURO:")
            print()
            begin = time.time()
            caminhoSeguro = g.seguro()
            end = time.time()
            print("O JOGADOR 1 DEMOROU " + str(len(caminhoSeguro)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoSeguro))
            print("O ALGORITMO SEGURO DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            print()
            # Algoritmo AEstrela
            print("JOGADOR 2. CARRO AESTRELA:")
            print()
            begin = time.time()
            caminhoAEstrela = g.aestrela()
            end = time.time()
            print("O JOGADOR 2 DEMOROU " + str(len(caminhoAEstrela)) + " SEGUNDOS PARA FINALIZAR O CIRCUITO!")
            print("O CAMINHO É CONSTITUÍDO POR: (LINHA, COLUNA, VELOCIDADELINHA, VELOCIDADECOLUNA)")
            print("CAMINHO: " + str(caminhoAEstrela))
            print("O ALGORITMO AESTRELA DEMOROU CERCA DE " + str(end - begin) + " SEGUNDOS!")
            g.drawPath(caminhoAEstrela, filePathEspecial, filePathEspecialPath)
            print()
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
        case '0':
            print("VECTORRACE!")
        case _:
            print("CARACTER INVÁLIDO. PRIMA NOVAMENTE!")
            print("ESCOLHER CIRCUITO: ")
            print("PRIMA 1 PARA ESCOLHER O CIRCUITO ABERTO.")
            print("PRIMA 2 PARA ESCOLHER O CIRCUITO CIRCULAR.")
            print("PRIMA 3 PARA ESCOLHER O CIRCUITO LABIRINTO.")
            print("PRIMA 4 PARA ESCOLHER O CIRCUITO OVAL.")
            print("PRIMA 5 PARA ESCOLHER O CIRCUITO RETA.")
            print("PRIMA 6 PARA ESCOLHER O CIRCUITO BURACO.")
            print("PRIMA 7 PARA ESCOLHER O CIRCUITO ESTRADA.")
            print("PRIMA 8 PARA ESCOLHER O CIRCUITO CAMINHO APERTADO.")
            print("PRIMA 9 PARA ESCOLHER O CIRCUITO ESPIRAL.")
            print("PRIMA 10 PARA ESCOLHER O CIRCUITO HEXA.")
            print("PRIMA 11 PARA ESCOLHER O CIRCUITO RETA PERIGOSA.")
            print("PRIMA 0 PARA SAIR DO VECTORRACE.")
